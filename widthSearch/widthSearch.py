import queue

# 入力は(経路配列, 初期化キュー, スタート, ゴール)
# 経路配列は下記のような"#"を壁とする配列か文字列
"""
[['#', '#', '#', '#', '#'], 
 ['#', '.', '.', '#', '#'], 
 ['#', '#', '.', '.', '#'], 
 ['#', '.', '.', '.', '#'], 
 ['#', '#', '#', '#', '#']]
 もしくは
["#####", 
 "#..##", 
 "##..#", 
 "#...#", 
 "#####"]
"""


def func(c, queue, start, goal):
    gy, gx = goal
    queue.put(start)
    visited = [[-1 for i in range(len(c[0]))] for i in range(len(c))]
    count = 0

    def search(sy, sx, queue, visited):
        if c[sy][sx] != "#" and visited[sy][sx] == -1:
            queue.put([sy, sx])
            visited[sy][sx] = 1
        return

    while 1:
        size = queue.qsize()
        if size == 0:
            return -1
        for i in range(size):
            [sy, sx] = queue.get()
            visited[sy][sx] = count
            if sy == gy and sx == gx:
                return count
            search(sy + 1, sx, queue, visited)
            search(sy - 1, sx, queue, visited)
            search(sy, sx + 1, queue, visited)
            search(sy, sx - 1, queue, visited)
        count += 1


"""
R, C = [int(i) for i in input().split()]
c = [["#" for i in range(C + 2)] for i in range(R + 2)]
for i in range(1, R + 1):
    c[i][1:-1] = input()
print(func(c, queue.Queue(), [0, 0], [R, C]))
"""
# print("print(func({}, {}, {}, queue.Queue()))".format(R, C, c))
print(func([['#', '#', '#', '#', '#'], ['#', '.', '.', '#', '#'], ['#', '#', '.', '.', '#'], ['#', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#']], queue.Queue(), [1, 1], [3, 3]))
print(func([['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
             '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
             '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '.', '.', '.', '#', '.', '.', '.', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '.', '.',
             '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '#'],
            ['#', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
            ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '.', '#', '.', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#'],
            ['#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '#',
             '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '#', '.', '.', '.', '#', '.', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '.', '.',
             '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
             '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
             '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']], queue.Queue(),
           [1, 1], [10, 37]))
